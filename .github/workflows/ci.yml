name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name:  Configure CMake
        run:   |
               if [ "$RUNNER_OS" == "Windows" ]; then
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl"
               else
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
               fi
      - name:  Build
        run:   cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE

  test:
    needs:   build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name:  Configure CMake
        run:   |
               if [ "$RUNNER_OS" == "Windows" ]; then
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl"
               else
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
               fi
      - name:  Build
        run:   cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE

      - name:              Test
        working-directory: ${{github.workspace}}/build
        shell:             bash
        run:               ctest -C $BUILD_TYPE --output-on-failure

  coverage:
    needs:   test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name:  Configure CMake
        run:   cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=1
      - name:  Build
        run:   cmake --build "${{github.workspace}}/build" --config Debug --target DDPackage_test
      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        run:               ./DDPackage_test
      - name: Run gcov
        run: |
          find . -type f -name '*.gcno' -exec gcov -p  {} +
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          fail_ci_if_error: true
          verbose: true

  codestyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source:             'include test'
          clangFormatVersion: 12

  benchmark:
    needs:   test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name:  Configure CMake
        run:   cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=Release
      - name:  Build
        run:   cmake --build "${{github.workspace}}/build" --config Release --target DDPackage_bench
      - name:              Run Benchmarks
        working-directory: ${{github.workspace}}/build
        run:               ./DDPackage_bench --benchmark_format=json | tee benchmark_result.json
      - name: Store benchmark result # for pushes
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: rhysd/github-action-benchmark@v1
        #        if: github.event_name == 'push'
        with:
          # What benchmark tool the output.txt came from
          tool:             'googlecpp'
          # Where the output from the benchmark tool is stored
          output-file-path: build/benchmark_result.json
          # Workflow will fail when an alert happens
          fail-on-alert:    true
          # GitHub API token to make a commit comment
          github-token:     ${{ secrets.GITHUB_TOKEN }}
          # Enable alert commit comment
          comment-on-alert: true
          # Set alert threshold
          alert-threshold:  500%
          # Mention @burgholzer in the commit comment
          alert-comment-cc-users: '@burgholzer'
          # Push and deploy GitHub pages branch automatically
          auto-push:        true
